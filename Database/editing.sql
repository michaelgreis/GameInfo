INSERT INTO datamart.marketentry (marketentryid,releasedate, sourceid,primaryprice,sourceurl,gameimageurl,reviewsurl,marketplaceitemid, etlsource, insertdatetime)  SELECT   (select COALESCE(max(marketentryid),1) from datamart.marketentry)+row_number() over () as marketplaceitemid,   CASE WHEN LEFT(steammarketplace.full_data::json->>'release_date',25) IS NULL THEN '01/01/1000'  ELSE LEFT(steammarketplace.full_data::json->>'release_date',25) END as releasedate,  etlsource.sourceid as sourceid,   CASE WHEN (is_numeric(steammarketplace.full_data::json->>'price') = 'false' OR steammarketplace.full_data::json->>'price' IS NULL) THEN 0 ELSE cast(steammarketplace.full_data::json->>'price' as numeric(12,2)) END   as primaryprice,     steammarketplace.full_data::json->>'url' as sourceurl,  steammarketplace.full_data::json->>'gameImage' as gameimageurl,  steammarketplace.full_data::json->>'reviews_url' as reviewsurl,   marketplaceitem.marketplaceitemid as marketplaceitemid,   'steammarketplace_scraperdataTOdatamart' as etlsource,  current_timestamp as insertdatetime   FROM scraperdata.steammarketplace steammarketplace   INNER JOIN datamart.console console    ON 'PC' = console.consolename   INNER JOIN datamart.marketplaceitem marketplaceitem    ON COALESCE(steammarketplace.full_data::json->>'title',steammarketplace.full_data::json->>'app_name') = marketplaceitem.title AND CASE WHEN steammarketplace.full_data::json->>'title' IS NOT NULL THEN steammarketplace.full_data::json->>'app_name' ELSE NULL END = marketplaceitem.alternatename    AND console.consoleid = marketplaceitem.consoleid INNER JOIN datamart.source etlsource ON 'Steam Marketplace' = etlsource.sourcename   ON CONFLICT DO NOTHING;